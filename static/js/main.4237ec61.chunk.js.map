{"version":3,"sources":["components/Images/Hang0.jpg","components/Images/Hang1.jpg","components/Images/Hang2.jpg","components/Images/Hang3.jpg","components/Images/Hang4.jpg","components/Images/Hang5.jpg","components/Images/HangGameOver.jpg","components/Background.tsx","components/WordProgress.tsx","components/Menu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Background","lossLevel","src","Hang0","Hang1","Hang2","Hang3","Hang4","Hang5","HangGameOver","WordProgress","guessedLetters","blanks","hiddenWord","setHiddenWord","setBlanks","Menu","setLossLevel","setGuessedLetters","useState","entryBoxText","setEntryBoxText","resetGame","tempWord","window","prompt","i","length","initializeBlanks","guessBox","boxText","includes","tempString","displayBlanks","type","name","value","onChange","e","target","Button","onClick","App","hangStage","setHangStage","newWord","setNewWord","Container","className","Row","Col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4237ec61.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Hang0.9b4b4334.jpg\";","export default __webpack_public_path__ + \"static/media/Hang1.81f925c9.jpg\";","export default __webpack_public_path__ + \"static/media/Hang2.165f982f.jpg\";","export default __webpack_public_path__ + \"static/media/Hang3.9cb0c3c7.jpg\";","export default __webpack_public_path__ + \"static/media/Hang4.42246e7f.jpg\";","export default __webpack_public_path__ + \"static/media/Hang5.4e1db088.jpg\";","export default __webpack_public_path__ + \"static/media/HangGameOver.9e0c5b94.jpg\";","import Hang0 from './Images/Hang0.jpg';\r\nimport Hang1 from './Images/Hang1.jpg';\r\nimport Hang2 from './Images/Hang2.jpg';\r\nimport Hang3 from './Images/Hang3.jpg';\r\nimport Hang4 from './Images/Hang4.jpg';\r\nimport Hang5 from './Images/Hang5.jpg';\r\nimport HangGameOver from './Images/HangGameOver.jpg';\r\n\r\n//var lossLevel:number = 3;\r\nexport function Background({lossLevel}: {lossLevel: number}): JSX.Element{\r\n    if (lossLevel==0){\r\n        return <div>\r\n        <img src={Hang0}/>\r\n      </div>\r\n    } else if (lossLevel==1){\r\n        return <div>\r\n        <img src={Hang1}/>\r\n      </div>\r\n    } else if (lossLevel==2){\r\n        return <div>\r\n        <img src={Hang2}/>\r\n      </div>\r\n    } else if (lossLevel==3){\r\n        return <div>\r\n        <img src={Hang3}/>\r\n      </div>\r\n    } else if (lossLevel==4){\r\n        return <div>\r\n        <img src={Hang4}/>\r\n      </div>\r\n    } else if (lossLevel==5){\r\n        return <div>\r\n        <img src={Hang5}/>\r\n      </div>\r\n    } else {\r\n        return <div>\r\n        <img src={HangGameOver}/>\r\n      </div>\r\n    }\r\n    \r\n}","import React, { useState } from 'react';\r\nimport { letterDisplay } from '../interfaces/letterDisplay';\r\n\r\nexport function WordProgress({guessedLetters, hiddenWord, setHiddenWord, blanks, setBlanks}:\r\n     {guessedLetters: string, hiddenWord: string, setHiddenWord: (newWord: string)=>void,\r\n        blanks: string, setBlanks: (newBlanks: string)=>void}): JSX.Element{\r\n    \r\n/*\r\n    function displayBlanks(hiddenWord: string, guessedLetters: string): string{\r\n        let displayLetter = false;\r\n        for (let i=0; i<hiddenWord.length; i++){\r\n            for (let j=0; j<guessedLetters.length; i++){\r\n                if (hiddenWord[i]==guessedLetters[j]){\r\n                    displayLetter=true;\r\n                }\r\n            }\r\n            if (displayLetter){\r\n                setBlanks(blanks + hiddenWord[i] + \"  \");\r\n            } else {\r\n                setBlanks(blanks + \"_  \");\r\n            }\r\n        }\r\n        return blanks;\r\n    }*/\r\n\r\n    return <div>\r\n        <h1>Letters Guessed:</h1>\r\n        <div><strong>Guessed Letters:</strong> {guessedLetters}</div>\r\n        <div><strong>Word Progress:</strong></div>\r\n        <h2><strong>{blanks}</strong></h2>\r\n    </div>\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { Button,  } from 'react-bootstrap';\r\n//props: {setGuessedLetters: (newlets: string)=>void}\r\n\r\nexport function Menu({lossLevel, setLossLevel, guessedLetters, setGuessedLetters, hiddenWord, setHiddenWord, blanks, setBlanks}: \r\n  {lossLevel: number, setLossLevel: (badGuesses: number)=>void,\r\n    guessedLetters: string, setGuessedLetters: (newLetterList: string)=>void,\r\n    hiddenWord: string, setHiddenWord: (newWord: string)=>void,\r\n    blanks: string, setBlanks: (newBlanks: string)=>void}): JSX.Element{\r\n    \r\n    const [entryBoxText, setEntryBoxText] = useState<string>('');\r\n    \r\n\r\n    function resetGame(): void{\r\n      setLossLevel(0);\r\n      setGuessedLetters('');\r\n      setHiddenWord('');\r\n      const tempWord = window.prompt(\"Enter a word for someone else to guess:\");\r\n      setHiddenWord(tempWord as string);\r\n      setBlanks('');\r\n      initializeBlanks();\r\n    }\r\n    function guessBox(boxText: string){\r\n      if (hiddenWord.includes(entryBoxText)){\r\n        displayBlanks(hiddenWord, entryBoxText);\r\n      } else {\r\n        setGuessedLetters(guessedLetters + entryBoxText);\r\n        setLossLevel(lossLevel+1);\r\n      }\r\n      setEntryBoxText('');\r\n    }\r\n    function displayBlanks(hiddenWord: string, entryBoxText: string): void{\r\n      let tempString = '';\r\n      for (let i=0; i<hiddenWord.length; i++){\r\n          if (hiddenWord[i]==entryBoxText[0]){\r\n            tempString = tempString + entryBoxText[0] + \"  \";\r\n          } else {\r\n            if (hiddenWord[i]==blanks[(3*i)]){\r\n              tempString = tempString + hiddenWord[i] + \"  \";\r\n            } else {\r\n              tempString = tempString + \"_  \";\r\n            }\r\n          }\r\n      }\r\n      setBlanks('');\r\n      setBlanks(tempString);\r\n    }\r\n    function initializeBlanks(){\r\n      let temp = '';\r\n      for (let i=0; i<hiddenWord.length; i++){\r\n        temp = temp + \"_  \";\r\n      }\r\n    }\r\n\r\n    return <div>\r\n    <input\r\n        type=\"textbox\"\r\n        name=\"Enter a letter to guess:\"\r\n        value={entryBoxText}\r\n        onChange={(e)=>{setEntryBoxText(e.target.value)}}\r\n      />\r\n      <Button onClick= {()=> guessBox(entryBoxText)}>Submit</Button>\r\n  <Button onClick= {()=> resetGame()}>New Game</Button>\r\n  </div>\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { Background } from './components/Background';\nimport {WordProgress} from './components/WordProgress';\nimport {Menu} from './components/Menu'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport { letterDisplay } from './interfaces/letterDisplay';\n\n/**To Do list:\n * Accept word and save it to newWord\n * Display blanks for the guessed word\n * Parse relevant strings to figure out where guessed letters go\n * Replace blanks with right letter guesses \n */\n\nfunction App(): JSX.Element {\n  const [guessedLetters, setGuessedLetters] = useState<string>('');\n  const [hangStage, setHangStage] = useState<number>(0);\n  const [letterSlots, setLetterSlots] = useState<string>('');\n  const [newWord, setNewWord] = useState<string>('');\n  const [blanks, setBlanks] = useState<string>(\"\");\n    return (\n      <Container className=\"App\">\n        <Row>\n          <Col>\n            <Background lossLevel = {hangStage}></Background>\n          </Col>\n          <Col>\n            <WordProgress guessedLetters = {guessedLetters}\n            hiddenWord= {newWord} setHiddenWord = {setNewWord}\n            blanks = {blanks} setBlanks = {setBlanks}></WordProgress>\n            <Menu lossLevel = {hangStage} setLossLevel = {setHangStage}\n            guessedLetters = {guessedLetters} setGuessedLetters = {setGuessedLetters}\n            hiddenWord = {newWord} setHiddenWord = {setNewWord}\n            blanks = {blanks} setBlanks = {setBlanks}></Menu>\n          </Col>\n        </Row>          \n      </Container> \n    );\n}\n\nexport default App; \n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}